# Jinja2 variable for 15 sample scripts
{% set scripts = [
    {"id": "1", "name": "Script 1", "description": "Script - 1", "code": "<script>alert(\\'Script 1\\')</script>", "orderNumber": 1},
    {"id": "2", "name": "Script 2", "description": "Script - 2", "code": "<script>alert(\\'Script 2\\')</script>", "orderNumber": 2},
    {"id": "3", "name": "Script 2", "description": "Script - 3", "code": "<script>alert(\\'Script 3\\')</script>", "orderNumber": 3},
    {"id": "4", "name": "Script 2", "description": "Second - 4", "code": "<script>alert(\\'Script 4\\')</script>", "orderNumber": 4},
    {"id": "5", "name": "Script 2", "description": "Second - 5", "code": "<script>alert(\\'Script 5\\')</script>", "orderNumber": 5},
    {"id": "6", "name": "Script 2", "description": "Second - 6", "code": "<script>alert(\\'Script 6\\')</script>", "orderNumber": 6},
    {"id": "7", "name": "Script 2", "description": "Second - 7", "code": "<script>alert(\\'Script 7\\')</script>", "orderNumber": 7},
    {"id": "8", "name": "Script 2", "description": "Second - 8", "code": "<script>alert(\\'Script 8\\')</script>", "orderNumber": 8},
    {"id": "9", "name": "Script 2", "description": "Second - 9", "code": "<script>alert(\\'Script 9\\')</script>", "orderNumber": 9}
] %}

worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    sendfile on;
    keepalive_timeout 65;

    # Define a map for script IDs to responses
    map $script_id $script_response {
        default '{"message": "Script not found"}';
        {% for script in scripts %}
        "{{ script.id }}" '{
            "id": "{{ script.id }}",
            "name": "{{ script.name }}",
            "description": "{{ script.description }}",
            "code": "{{ script.code }}",
            "orderNumber": {{ script.orderNumber }}
        }';
        {% endfor %}
    }

    # Iterate over the input ports array to create multiple servers listening on each port
    {% for ip in server_ips %}
    server {
        listen {{ ip }}:80;
        server_name localhost;

        # Serve the API for scripts
        location /api/v1/script {
            default_type application/json;

            # Return all scripts
            if ($request_method = GET) {
                return 200 '
                {
                    "scripts": [
                        {% for script in scripts %}
                        {
                            "id": "{{ script.id }}",
                            "name": "{{ script.name }}",
                            "description": "{{ script.description }}",
                            "code": "{{ script.code }}",
                            "orderNumber": {{ script.orderNumber }}
                        }{% if not loop.last %},{% endif %}
                        {% endfor %}
                    ]
                }';
            }

            # Handle POST for adding a new script (mock response)
            if ($request_method = POST) {
                return 201 '{"message": "Script created successfully."}';
            }
        }

        # Serve specific script by ID
        location /api/v1/script/ {
            default_type application/json;

            # Capture script ID from URL path
            set $script_id $uri;

            # Extract ID from path
            if ($script_id ~* /api/v1/script/(\d+)) {
                set $script_id $1;
            }

            # Get script by ID
            if ($request_method = GET) {
                return 200 $script_response;
            }

            # Handle PUT for updating a script
            if ($request_method = PUT) {
                # Simulate update by returning a mock response
                return 200 '{
                    "message": "Script updated successfully."
                }';
            }

            # Delete script by ID (mock response)
            if ($request_method = DELETE) {
                return 204 '';
            }
        }

        location = /health {
            return 200 "Healthy\n";
        }

        location = /node-server {
            return 200 "Node server {{ ip }}\n";
        }

        {% for i in range(1, 21) %}
        location /endpoint{{ i }} {
            return 200 "OK. Endpoint - {{ i }}\n";
        }
        {% endfor %}
    }
    {% endfor %}
}

